len 计算元素个数





tuple() 函数，可以直接将生成器对象转换成元组
    a = (x for x in range(1,10)) # range（范围）
    >>> a
        generator object <genexpr> at 0x7faf6ee20a50>  # 返回的是生成器对象
    >>> tuple(a)       # 使用 tuple() 函数，可以直接将生成器对象转换成元组 #tuple(元组)
        (1, 2, 3, 4, 5, 6, 7, 8, 9)





取余和取模的区别
通常取模运算也叫取余运算，它们返回结果都是余数 .rem 和 mod 唯一的区别在于:
当 x 和 y 的正负号一样的时候，两个函数结果是等同的；当 x 和 y 的符号不同时，rem 函数结果的符号和 x 的一样，而 mod 和 y 一样。
这是由于这两个函数的生成机制不同，rem 函数采用 fix 函数，而 mod 函数采用了 floor 函数（这两个函数是用来取整的，fix 函数向 0 方向舍入，floor 函数向无穷小方向舍入）。 rem（x，y）命令返回的是 x-n.*y，如果 y 不等于 0，其中的 n = fix(x./y)，而 mod(x,y) 返回的是 x-n.*y，当 y 不等于 0 时，n=floor(x./y)
两个异号整数取模取值规律 （当是小数时也是这个运算规律，这一点好像与 C 语言的不太一样）
先将两个整数看作是正数，再作除法运算:

例：mod(36,-10)=-4
即：36 除以 10 的整数商为 3，加 1 后为 4；其与除数之积为 40；再与被数之差为（40-36=4）；取除数的符号。所以值为 -4。
例：mod(9,1.2)=0.6;
例：
    >> mod(5,2)
        ans =1                   % 除数是正，余数就是正
    >> mod(-5,2)
        ans =1
    >> mod(5,-2)
        ans =-1                  % 除数是负，余数就是负
    >> mod(-5,-2)
        ans =-1                  % 用 rem 时，不管除数是正是负，余数的符号与被除数的符号相同
    >> rem(5,2)
        ans =1                   % 被除数是正，余数就是正
    >> rem(5,-2); 
        ans =1
    >> rem(-5,2)
        ans =-1                 % 被除数是负， 余数就是负
    >> rem(-5,-2)
        ans =-1




列表[]
eg. [1, 2, 3, 4]
    ["Hello", "World"]
    ['Hello', 'World']

元组() # 所谓元组的不可变指的是元组所指向的内存中的内容不可变。
eg. (1, 2, 3, 4)
    ("Hello", "World")
    ('Hello', 'World')

(1)为整式
(1,)为元组

字典{} # a = {key1 : value1, key2 : value2, key3 : value3 }
eg. tinydict1 = { 'abc': 456 }
    tinydict2 = { 'abc': 123, 98.6: 37 }

集合()
eg. a = set('abracadabra')
    b = set('alacazam')
添加元素
s.add( x )
还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下：
s.update( x )
    >>> thisset = set(("Google", "Runoob", "Taobao"))
    >>> thisset.update({1,3})
    >>> print(thisset)
        {1, 3, 'Google', 'Taobao', 'Runoob'}
    >>> thisset.update([1,4],[5,6])  
    >>> print(thisset)
        {1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'}
移除元素
s.remove( x )
此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示：
s.discard( x )
    >>> thisset = set(("Google", "Runoob", "Taobao"))
    >>> thisset.discard("Facebook")  # 不存在不会发生错误
    >>> print(thisset)
        {'Taobao', 'Google', 'Runoob'}
计算集合元素个数
len(s)
清空集合
s.clear()

    
1、能整除时，其值为 0
2、不能整除时，其值=除数×(整商+1)-被除数

注意    正数时开始数为0
        倒数时开始数为-1


break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。
continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。

参数传递
在 python 中，类型属于对象，对象有不同类型的区分，变量是没有类型的：



Python3 表达式
[表达式 for 变量 in 列表] 
[out_exp_res for out_exp in input_list]

或者 

[表达式 for 变量 in 列表 if 条件]
[out_exp_res for out_exp in input_list if condition]

out_exp_res：列表生成元素表达式，可以是有返回值的函数。
for out_exp in input_list：迭代 input_list 将 out_exp 传入到 out_exp_res 表达式中。
if condition：条件语句，可以过滤列表中不符合条件的值。
过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母：

实例
    >>> names = ['Bob','Tom','alice','Jerry','Wendy','Smith']
    >>> new_names = [name.upper()for name in names if len(name)>3]
    >>> print(new_names)
        ['ALICE', 'JERRY', 'WENDY', 'SMITH']

字典推导式
字典推导基本格式：

{ key_expr: value_expr for value in collection }

或

{ key_expr: value_expr for value in collection if condition }

实例
    >>> listdemo = ['Google','Runoob', 'Taobao']
# 将列表中各字符串值为键，各字符串的长度为值，组成键值对
    >>> newdict = {key:len(key) for key in listdemo}
    >>> newdict
        {'Google': 6, 'Runoob': 6, 'Taobao': 6}
提供三个数字，以三个数字为键，三个数字的平方为值来创建字典：

实例
    >>> dic = {x: x**2 for x in (2, 4, 6)}
    >>> dic
        {2: 4, 4: 16, 6: 36}
    >>> type(dic)
        <class 'dict'>

